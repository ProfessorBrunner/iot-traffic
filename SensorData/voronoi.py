# import matplotlib.pyplot as plt
# from scipy.spatial import Voronoi, voronoi_plot_2d
# import numpy as np

# points = np.array([[-88.1594,40.3131],[-87.5961,40.1019],[-89.3586,38.3431],[-87.8228,39.9678],[-88.9147,41.5514],[-87.6483,40.1389],[-88.9203,38.0336],[-88.9506,39.8289],[-90.3789,39.4411],[-88.6678,37.4389],[-88.4094,38.5047],[-88.0228,38.9364],[-90.1539,40.3969],[-88.2925,39.69],[-90.6381,40.9442],[-89.3656,37.7608],[-88.8514,41.8431],[-91.4281,39.9058],[-87.6564,39.1139],[-88.1906,39.1397],[-88.5314,42.3628],[-87.9567,40.11],[-88.2778,40.0397],[-87.5725,41.1811],[-88.1639,42.1153],[-88.7533,41.3286],[-88.2403,40.0839],[-88.6672,37.4361],[-89.6839,39.8447],[-90.7642,40.2258],[-88.4728,41.8742],[-87.7197,38.7239],[-88.7267,40.0083],[-87.6225,39.0028],[-88.3264,38.3806],[-89.3269,42.0058],[-89.9283,38.1853],[-88.0769,42.2553],[-89.0564,38.7642],[-89.1856,37.0422],[-87.9281,38.8011],[-88.3092,41.7806],[-89.3367,41.7225],[-89.2414,40.6211],[-87.7175,41.0228],[-88.9461,38.6453],[-91.1919,39.9369],[-90.4642,40.5914],[-88.1533,40.0064],[-89.0864,40.4864],[-89.0422,37.2036],[-89.8614,41.0908],[-89.8997,41.2428],[-91.0222,40.1064],[-88.63,39.7122],[-88.1653,39.4761],[-88.9317,37.9089],[-90.0517,42.4483],[-89.1931,37.9878],[-87.7853,42.1397],[-89.5031,40.9153],[-87.9525,40.375],[-88.1881,41.6386],[-90.3167,41.1831],[-90.2058,39.3425],[-89.7689,39.5061],[-87.7775,41.7372],[-87.7578,38.4106],[-89.3386,40.1519],[-90.2269,42.3161],[-87.6056,38.7642],[-88.1417,40.4547],[-90.9686,40.5839],[-90.4792,40.1347],[-87.6803,41.4947],[-87.8667,42.4167],[-89.4919,39.1611],[-88.9433,38.4628],[-89.8744,39.6314],[-88.3544,39.4725],[-90.1486,41.4511],[-90.0203,40.7764],[-87.7575,40.6828],[-88.1805,38.0733],[-88.2908,39.7947],[-88.0581,41.8267],[-89.0339,40.9125],[-89.4653,40.6006],[-89.2344,37.4814],[-87.9353,41.1758],[-89.1267,41.5294],[-90.1942,38.5669],[-89.3381,41.2647],[-89.8422,42.0919],[-89.0867,39.3686],[-89.1022,39.1483],[-88.9794,42.405],[-88.4356,41.6211],[-87.6661,39.8039],[-88.4228,41.9603],[-88.7808,40.6408],[-89.7564,40.9275],[-89.6556,38.7583],[-88.2803,39.4781],[-89.2289,41.0389],[-88.3653,40.4731],[-88.8158,41.0908],[-90.8236,39.8058],[-88.0364,39.7914],[-89.6039,42.2972],[-89.9903,42.3997],[-88.6244,39.1181],[-90.1392,39.1564],[-89.2611,40.7122],[-88.7739,39.4078],[-91.0094,41.4256],[-89.1975,42.4436],[-88.8656,39.8344],[-90.1619,38.3664],[-89.0931,42.1928],[-89.3658,38.6308],[-88.1028,41.5033],[-88.2886,40.75],[-90.1544,41.8978],[-87.9989,38.2758],[-87.6672,39.6186],[-88.2533,42.3092],[-89.7964,39.9275],[-89.7167,38.1167],[-89.6839,40.6675],[-89.6289,38.5411],[-90.3431,39.1025],[-89.5472,39.8431],[-88.6531,37.1275],[-88.3503,40.3175],[-89.3819,38.0981],[-89.0092,37.9117],[-87.9336,41.995],[-88.8533,38.3483],[-89.8703,39.2883],[-89.4614,39.4158],[-88.9583,38.9544],[-88.1828,40.7569],[-88.7756,41.9342],[-90.2286,39.7133],[-89.6289,41.1461],[-89.6119,42.0347],[-89.9492,37.9842],[-89.1947,40.7983],[-87.765,41.3933],[-89.5103,37.6592],[-90.3331,39.7714],[-89.0953,38.9581],[-87.9731,41.8422],[-88.1828,38.9917],[-90.1978,39.7347],[-89.3069,39.5333],[-88.8653,41.7322],[-89.3783,37.2486],[-91.0233,40.8822],[-88.4797,38.6786],[-88.4311,37.1644],[-89.2833,40.0075],[-88.6308,42.4147],[-89.0239,41.8136],[-89.5981,40.4917],[-90.3861,42.3994],[-90.8058,39.6222],[-90.5647,41.5181],[-87.7769,39.0061],[-89.0708,41.9117],[-90.7525,39.9842],[-90.1572,38.5714],[-90.1464,38.8664],[-88.0569,38.3778],[-88.5536,41.5325],[-88.3728,40.0528],[-88.1783,42.0256],[-88.5011,38.7725],[-89.4478,40.6994],[-88.2819,41.3978],[-89.085,38.2133],[-88.4122,37.4747],[-88.2464,41.9144],[-90.7417,41.2019],[-90.2897,40.9025],[-87.9739,38.5989],[-89.8506,40.0308],[-89.8467,38.52],[-89.1658,37.7308],[-91.0578,41.1925],[-88.7831,39.1814],[-88.0817,38.7003],[-88.5311,39.1064],[-89.3339,40.5514],[-90.9394,41.0994],[-90.7086,39.7378],[-89.8178,38.6003],[-90.6697,40.4786],[-89.5989,41.5519],[-91.1125,40.3444],[-88.5292,41.6519],[-88.4336,41.3708],[-87.9747,39.2975],[-89.1297,38.5547],[-89.4556,39.5894],[-89.9842,42.0981],[-88.6256,37.2253],[-88.8639,42.255],[-88.0728,41.8128],[-88.6364,40.8778],[-87.7556,40.7928],[-89.4153,41.0186],[-89.9744,41.8039],[-88.9703,38.4931],[-90.4528,39.635],[-89.6503,38.0033],[-88.6078,42.2636],[-88.6067,39.5608],[-87.9047,42.1208],[-89.8308,37.9022],[-88.4111,41.1072],[-89.1647,37.2686],[-88.4814,41.77],[-88.3117,38.6058],[-90.9472,40.2333],[-90.5233,41.4653],[-89.9375,41.6753],[-88.5244,37.7408],[-87.685,40.4664],[-89.625,39.8361],[-89.1631,37.0897],[-89.405,38.8664],[-89.6044,39.7578],[-87.9989,41.3639],[-88.9675,40.1375],[-88.95,40.5492],[-91.1278,40.4089],[-88.7108,40.7394],[-88.0594,42.4308],[-89.8678,39.9633],[-90.3856,40.9464],[-88.3981,40.1858],[-89.0028,37.6792],[-88.1336,37.6978],[-88.7075,42.0744],[-88.085,41.6042],[-88.0994,42.4811],[-88.5928,39.8014],[-90.0656,40.3031],[-88.5758,38.7103],[-88.9106,41.3283],[-87.7522,41.7861],[-88.9781,41.6653],[-90.4278,40.0164],[-88.2372,42.4678],[-90.0028,38.8097],[-89.1072,41.3503],[-89.7008,39.0719],[-89.4519,41.3661],[-89.2497,37.7797],[-90.2083,39.9494],[-89.6569,41.0525],[-90.035,41.1739],[-87.7858,41.3269],[-88.8069,39.5514],[-90.4447,40.6633],[-89.6161,39.8889],[-90.0881,40.9369],[-88.9858,41.3242],[-89.4161,39.8564],[-88.2233,40.1147],[-89.5136,41.835],[-90.7197,40.9361],[-90.3914,40.5011],[-88.5961,39.4458],[-91.2436,39.8208],[-87.8856,41.1381],[-88.9994,40.4961],[-88.4983,40.7511],[-88.3953,42.2611],[-88.2861,42.0628],[-89.5906,40.6033],[-87.8761,41.7092],[-90.1642,41.1203],[-88.9883,38.0406],[-89.6511,40.1642],[-88.9564,39.9078],[-89.7039,40.5978],[-90.28,40.7072],[-89.5664,40.7039],[-90.4289,38.9681],[-90.9078,40.3372],[-89.0158,39.5878],[-88.8556,38.7706],[-87.6865,39.6137],[-89.2164,40.3992],[-87.6094,41.8558],[-89.6667,40.6914],[-89.8756,38.3219],[-89.6414,41.7981],[-88.5364,40.4536],[-88.7114,37.1442],[-87.5417,41.5422],[-88.5,39.3536],[-90.0469,40.4928],[-90.5114,41.4703]])

# vor = Voronoi(points)
# print(vor.regions)
# voronoi_plot_2d(vor)

import numpy as np
import matplotlib.pyplot as plt
from scipy.spatial import Voronoi, voronoi_plot_2d

def voronoi_finite_polygons_2d(vor, radius=None):
    """
    Reconstruct infinite voronoi regions in a 2D diagram to finite
    regions.
    Parameters
    ----------
    vor : Voronoi
        Input diagram
    radius : float, optional
        Distance to 'points at infinity'.
    Returns
    -------
    regions : list of tuples
        Indices of vertices in each revised Voronoi regions.
    vertices : list of tuples
        Coordinates for revised Voronoi vertices. Same as coordinates
        of input vertices, with 'points at infinity' appended to the
        end.
    """

    if vor.points.shape[1] != 2:
        raise ValueError("Requires 2D input")

    new_regions = []
    new_vertices = vor.vertices.tolist()

    center = vor.points.mean(axis=0)
    if radius is None:
        radius = vor.points.ptp().max()*2

    # Construct a map containing all ridges for a given point
    all_ridges = {}
    for (p1, p2), (v1, v2) in zip(vor.ridge_points, vor.ridge_vertices):
        all_ridges.setdefault(p1, []).append((p2, v1, v2))
        all_ridges.setdefault(p2, []).append((p1, v1, v2))

    # Reconstruct infinite regions
    for p1, region in enumerate(vor.point_region):
        vertices = vor.regions[region]

        if all(v >= 0 for v in vertices):
            # finite region
            new_regions.append(vertices)
            continue

        # reconstruct a non-finite region
        ridges = all_ridges[p1]
        new_region = [v for v in vertices if v >= 0]

        for p2, v1, v2 in ridges:
            if v2 < 0:
                v1, v2 = v2, v1
            if v1 >= 0:
                # finite ridge: already in the region
                continue

            # Compute the missing endpoint of an infinite ridge

            t = vor.points[p2] - vor.points[p1] # tangent
            t /= np.linalg.norm(t)
            n = np.array([-t[1], t[0]])  # normal

            midpoint = vor.points[[p1, p2]].mean(axis=0)
            direction = np.sign(np.dot(midpoint - center, n)) * n
            far_point = vor.vertices[v2] + direction * radius

            new_region.append(len(new_vertices))
            new_vertices.append(far_point.tolist())

        # sort region counterclockwise
        vs = np.asarray([new_vertices[v] for v in new_region])
        c = vs.mean(axis=0)
        angles = np.arctan2(vs[:,1] - c[1], vs[:,0] - c[0])
        new_region = np.array(new_region)[np.argsort(angles)]

        # finish
        new_regions.append(new_region.tolist())

    return new_regions, np.asarray(new_vertices)

#data points
points = np.array([[-88.1594,40.3131],[-87.5961,40.1019],[-89.3586,38.3431],[-87.8228,39.9678],[-88.9147,41.5514],[-87.6483,40.1389],[-88.9203,38.0336],[-88.9506,39.8289],[-90.3789,39.4411],[-88.6678,37.4389],[-88.4094,38.5047],[-88.0228,38.9364],[-90.1539,40.3969],[-88.2925,39.69],[-90.6381,40.9442],[-89.3656,37.7608],[-88.8514,41.8431],[-91.4281,39.9058],[-87.6564,39.1139],[-88.1906,39.1397],[-88.5314,42.3628],[-87.9567,40.11],[-88.2778,40.0397],[-87.5725,41.1811],[-88.1639,42.1153],[-88.7533,41.3286],[-88.2403,40.0839],[-88.6672,37.4361],[-89.6839,39.8447],[-90.7642,40.2258],[-88.4728,41.8742],[-87.7197,38.7239],[-88.7267,40.0083],[-87.6225,39.0028],[-88.3264,38.3806],[-89.3269,42.0058],[-89.9283,38.1853],[-88.0769,42.2553],[-89.0564,38.7642],[-89.1856,37.0422],[-87.9281,38.8011],[-88.3092,41.7806],[-89.3367,41.7225],[-89.2414,40.6211],[-87.7175,41.0228],[-88.9461,38.6453],[-91.1919,39.9369],[-90.4642,40.5914],[-88.1533,40.0064],[-89.0864,40.4864],[-89.0422,37.2036],[-89.8614,41.0908],[-89.8997,41.2428],[-91.0222,40.1064],[-88.63,39.7122],[-88.1653,39.4761],[-88.9317,37.9089],[-90.0517,42.4483],[-89.1931,37.9878],[-87.7853,42.1397],[-89.5031,40.9153],[-87.9525,40.375],[-88.1881,41.6386],[-90.3167,41.1831],[-90.2058,39.3425],[-89.7689,39.5061],[-87.7775,41.7372],[-87.7578,38.4106],[-89.3386,40.1519],[-90.2269,42.3161],[-87.6056,38.7642],[-88.1417,40.4547],[-90.9686,40.5839],[-90.4792,40.1347],[-87.6803,41.4947],[-87.8667,42.4167],[-89.4919,39.1611],[-88.9433,38.4628],[-89.8744,39.6314],[-88.3544,39.4725],[-90.1486,41.4511],[-90.0203,40.7764],[-87.7575,40.6828],[-88.1805,38.0733],[-88.2908,39.7947],[-88.0581,41.8267],[-89.0339,40.9125],[-89.4653,40.6006],[-89.2344,37.4814],[-87.9353,41.1758],[-89.1267,41.5294],[-90.1942,38.5669],[-89.3381,41.2647],[-89.8422,42.0919],[-89.0867,39.3686],[-89.1022,39.1483],[-88.9794,42.405],[-88.4356,41.6211],[-87.6661,39.8039],[-88.4228,41.9603],[-88.7808,40.6408],[-89.7564,40.9275],[-89.6556,38.7583],[-88.2803,39.4781],[-89.2289,41.0389],[-88.3653,40.4731],[-88.8158,41.0908],[-90.8236,39.8058],[-88.0364,39.7914],[-89.6039,42.2972],[-89.9903,42.3997],[-88.6244,39.1181],[-90.1392,39.1564],[-89.2611,40.7122],[-88.7739,39.4078],[-91.0094,41.4256],[-89.1975,42.4436],[-88.8656,39.8344],[-90.1619,38.3664],[-89.0931,42.1928],[-89.3658,38.6308],[-88.1028,41.5033],[-88.2886,40.75],[-90.1544,41.8978],[-87.9989,38.2758],[-87.6672,39.6186],[-88.2533,42.3092],[-89.7964,39.9275],[-89.7167,38.1167],[-89.6839,40.6675],[-89.6289,38.5411],[-90.3431,39.1025],[-89.5472,39.8431],[-88.6531,37.1275],[-88.3503,40.3175],[-89.3819,38.0981],[-89.0092,37.9117],[-87.9336,41.995],[-88.8533,38.3483],[-89.8703,39.2883],[-89.4614,39.4158],[-88.9583,38.9544],[-88.1828,40.7569],[-88.7756,41.9342],[-90.2286,39.7133],[-89.6289,41.1461],[-89.6119,42.0347],[-89.9492,37.9842],[-89.1947,40.7983],[-87.765,41.3933],[-89.5103,37.6592],[-90.3331,39.7714],[-89.0953,38.9581],[-87.9731,41.8422],[-88.1828,38.9917],[-90.1978,39.7347],[-89.3069,39.5333],[-88.8653,41.7322],[-89.3783,37.2486],[-91.0233,40.8822],[-88.4797,38.6786],[-88.4311,37.1644],[-89.2833,40.0075],[-88.6308,42.4147],[-89.0239,41.8136],[-89.5981,40.4917],[-90.3861,42.3994],[-90.8058,39.6222],[-90.5647,41.5181],[-87.7769,39.0061],[-89.0708,41.9117],[-90.7525,39.9842],[-90.1572,38.5714],[-90.1464,38.8664],[-88.0569,38.3778],[-88.5536,41.5325],[-88.3728,40.0528],[-88.1783,42.0256],[-88.5011,38.7725],[-89.4478,40.6994],[-88.2819,41.3978],[-89.085,38.2133],[-88.4122,37.4747],[-88.2464,41.9144],[-90.7417,41.2019],[-90.2897,40.9025],[-87.9739,38.5989],[-89.8506,40.0308],[-89.8467,38.52],[-89.1658,37.7308],[-91.0578,41.1925],[-88.7831,39.1814],[-88.0817,38.7003],[-88.5311,39.1064],[-89.3339,40.5514],[-90.9394,41.0994],[-90.7086,39.7378],[-89.8178,38.6003],[-90.6697,40.4786],[-89.5989,41.5519],[-91.1125,40.3444],[-88.5292,41.6519],[-88.4336,41.3708],[-87.9747,39.2975],[-89.1297,38.5547],[-89.4556,39.5894],[-89.9842,42.0981],[-88.6256,37.2253],[-88.8639,42.255],[-88.0728,41.8128],[-88.6364,40.8778],[-87.7556,40.7928],[-89.4153,41.0186],[-89.9744,41.8039],[-88.9703,38.4931],[-90.4528,39.635],[-89.6503,38.0033],[-88.6078,42.2636],[-88.6067,39.5608],[-87.9047,42.1208],[-89.8308,37.9022],[-88.4111,41.1072],[-89.1647,37.2686],[-88.4814,41.77],[-88.3117,38.6058],[-90.9472,40.2333],[-90.5233,41.4653],[-89.9375,41.6753],[-88.5244,37.7408],[-87.685,40.4664],[-89.625,39.8361],[-89.1631,37.0897],[-89.405,38.8664],[-89.6044,39.7578],[-87.9989,41.3639],[-88.9675,40.1375],[-88.95,40.5492],[-91.1278,40.4089],[-88.7108,40.7394],[-88.0594,42.4308],[-89.8678,39.9633],[-90.3856,40.9464],[-88.3981,40.1858],[-89.0028,37.6792],[-88.1336,37.6978],[-88.7075,42.0744],[-88.085,41.6042],[-88.0994,42.4811],[-88.5928,39.8014],[-90.0656,40.3031],[-88.5758,38.7103],[-88.9106,41.3283],[-87.7522,41.7861],[-88.9781,41.6653],[-90.4278,40.0164],[-88.2372,42.4678],[-90.0028,38.8097],[-89.1072,41.3503],[-89.7008,39.0719],[-89.4519,41.3661],[-89.2497,37.7797],[-90.2083,39.9494],[-89.6569,41.0525],[-90.035,41.1739],[-87.7858,41.3269],[-88.8069,39.5514],[-90.4447,40.6633],[-89.6161,39.8889],[-90.0881,40.9369],[-88.9858,41.3242],[-89.4161,39.8564],[-88.2233,40.1147],[-89.5136,41.835],[-90.7197,40.9361],[-90.3914,40.5011],[-88.5961,39.4458],[-91.2436,39.8208],[-87.8856,41.1381],[-88.9994,40.4961],[-88.4983,40.7511],[-88.3953,42.2611],[-88.2861,42.0628],[-89.5906,40.6033],[-87.8761,41.7092],[-90.1642,41.1203],[-88.9883,38.0406],[-89.6511,40.1642],[-88.9564,39.9078],[-89.7039,40.5978],[-90.28,40.7072],[-89.5664,40.7039],[-90.4289,38.9681],[-90.9078,40.3372],[-89.0158,39.5878],[-88.8556,38.7706],[-87.6865,39.6137],[-89.2164,40.3992],[-87.6094,41.8558],[-89.6667,40.6914],[-89.8756,38.3219],[-89.6414,41.7981],[-88.5364,40.4536],[-88.7114,37.1442],[-87.5417,41.5422],[-88.5,39.3536],[-90.0469,40.4928],[-90.5114,41.4703]])

vor = Voronoi(points)
voronoi_plot_2d(vor)

# plot
regions, vertices = voronoi_finite_polygons_2d(vor)

# colorize
for region in regions:
    polygon = vertices[region]
    plt.fill(*zip(*polygon), alpha=0.3)

plt.plot(points[:,0], points[:,1], 'ko')
plt.axis('equal')
plt.xlim(vor.min_bound[0] - 0.1, vor.max_bound[0] + 0.1)
plt.ylim(vor.min_bound[1] - 0.1, vor.max_bound[1] + 0.1)

plt.savefig('voronoiWithColor.png')
plt.show()

# plt.show()
